/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package outputstream;

import Conversation.SessionManager;
import EmotionDisplayAndFaceRecognition.FaceDetection;
import jarvis.ProjectJarvis;
import jarvis.inpustream.Mouth;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import static outputstream.BlackBoard.screenSize;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;
import javax.swing.Timer;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;

/**
 *
 * @author owoye001
 */
public class MainPanel extends javax.swing.JPanel {

    public static String LastFacialRecognitionUsername = "";

    //collect user name here and other various inputs here. 
    public boolean nameEntry = false; //for collecting the user name - OBSOLETE, MIGHT DELETE LATER
    public boolean textEntry = false; //for collecting text inputs
    public boolean numberEntry = false; //for collecing numbers
    public boolean imageEntry = false; //for collecting image inputs
    
    //image collection saves declaration variables
    public  String StringEntry;
    public  int NumberEntry;
    public  BufferedImage BufferedImageEntry;

    //detials below relates the HTMLEditor 
    public static JEditorPane jEditorPaneDisplayInfo;
    private JScrollPane jScrollPaneLoad;
    private HTMLDocument blank;
    private HTMLDocument htmlDoc;
    public int entry = 0;
    private Timer loadHtmlNicely;
    private StyleSheet styleSheetDetails;

    public static DisplayInformation displayInfo; //for display information to the screen
    public Mouth mouth; //for speaking 

    public static HTMLEditorKit detailPanelKit;
    public static Document docMainScreen;
    public static SystemSounds[] mousesounds;
    public FaceDetection fd;
    public SessionManager sessionManager = null; //sessionManager is null. no session. 
    public boolean SystemReadyStatus = false;

    public MainPanel() {

        initComponents();

        reInitializeComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 102, 0));
        setOpaque(false);
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void reInitializeComponents() {

        File file = new File(ProjectJarvis.settings.mainScreenBackground);

        //loading mouse sounds here 
        mousesounds = new SystemSounds[2]; //two mouse sounds
        mousesounds[0] = new SystemSounds("beep");
        mousesounds[1] = new SystemSounds("click");

        jEditorPaneDisplayInfo = new JEditorPane();
        jScrollPaneLoad = new JScrollPane(jEditorPaneDisplayInfo);

        //setting scroll bar  policy here
        jScrollPaneLoad.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPaneLoad.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jEditorPaneDisplayInfo.setBorder(null);
        jEditorPaneDisplayInfo.setBackground(Color.black);
        jEditorPaneDisplayInfo.setContentType("text/html");
        jEditorPaneDisplayInfo.setForeground(new java.awt.Color(102, 255, 102));
        jEditorPaneDisplayInfo.setEditable(false);
        jEditorPaneDisplayInfo.setAutoscrolls(true);

        jEditorPaneDisplayInfo.setName("");
        jScrollPaneLoad.getViewport().setOpaque(false);

        //adding a way to load html into editor
        // add a HTMLEditorKit to the editor pane
        detailPanelKit = new HTMLEditorKit();
        jEditorPaneDisplayInfo.setEditorKit(detailPanelKit);

        // add some styles to the html
        styleSheetDetails = detailPanelKit.getStyleSheet();
        styleSheetDetails.addRule("body {background-color: #000; text-align: right; font-size: 120px; color:#ff0000; font-family: Arial; margin: 20px; padding: 20px; }");
        styleSheetDetails.addRule("h1 {font-size: .5em; color: #00ff00; text-align: right; }"); //white
        styleSheetDetails.addRule("h2 {font-size: .49em; text-align: right; }"); //blue
        styleSheetDetails.addRule("h3 {font-size: .38em; text-align: right; }"); //red
        styleSheetDetails.addRule("h4 {font-size: .37em; text-align: right; }"); //green
        styleSheetDetails.addRule("p {font-size: .38em; text-align: right; }"); //red

        // create a document, set it on the jeditorpane, then add the html
        docMainScreen = detailPanelKit.createDefaultDocument();
        jEditorPaneDisplayInfo.setDocument(docMainScreen);

        try {
            jEditorPaneDisplayInfo.setText("<html><body style='color: #ff0000; background-color: #000; background-image: url(" + file.toURI().toURL() + "); '></body></html>");
        } catch (MalformedURLException ex) {
            //Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        //inserting element here
        htmlDoc = (HTMLDocument) jEditorPaneDisplayInfo.getDocument();

        jEditorPaneDisplayInfo.setBounds(0, 0, screenSize.width, screenSize.height);
        jScrollPaneLoad.setBounds(0, 0, screenSize.width, screenSize.height);
        

        add(jScrollPaneLoad);

    }

    /**
     * start activity in card layout
     */
    public void startActivityOnCard() {

        new Thread() {
            @Override
            public void run() {
                fd = new FaceDetection();
                fd.setVisible(true);
            }
        }.start();
        
        //MOOD IS HAPPY OR NEUTRAL
        //BlackBoard.emotions.setMood(MoodState.HAPPY);

        Thread startActivity = new Thread() {
            @Override
            public void run() {
                mouth = new Mouth(); //create a new mouth here 

                displayInfo = new DisplayInformation();
              
                Thread session = new Thread () {
                    @Override
                    public void run () {
                       
                        sessionManager = new SessionManager();
                        
                    }
                 };
                 session.start();
            }
        };
        startActivity.start();
   
    }

}
